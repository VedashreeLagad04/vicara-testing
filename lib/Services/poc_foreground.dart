import 'dart:async';
import 'dart:convert';
import 'dart:isolate';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:geolocator/geolocator.dart';
import 'package:vicara/Services/APIs/auth_api.dart';
import 'package:vicara/Services/consts.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

void startCallback() => FlutterForegroundTask.setTaskHandler(FirstTaskHandler());

class FirstTaskHandler extends TaskHandler {
  WebSocketChannel? channel;
  final AuthAPIs _apIs = AuthAPIs();
  StreamSubscription<Position>? streamSubscription;
  StreamSubscription? _connSub;
  Function? disconnectServer;
  StreamSubscription? _majorStream;
  int _connectionAttempt = 0;
  Future<void> wsTalker(String? phone, SendPort? sendPort) async {
    if (phone == null) return;
    if (channel == null) {
      channel = WebSocketChannel.connect(Uri.parse(wsURL + phone));
      _connectionAttempt = 0;
      _majorStream = Stream.periodic(const Duration(seconds: 1)).listen((event) async {
        if (channel != null) {
          channel?.sink.add('''{"accuracy": 20.0,"gravityX": [0.0002571896475274116, 0.0002843699185177684, 0.00026128129684366286, 0.00024169980315491557, 0.00022387188801076263, 0.0002332242438569665, 0.0002165653568226844, 0.0002510521444492042, 0.0002548515622038394, 0.00026391164283268154, 0.0002437456278130412, 0.0002492985804565251, 0.00027910919743590057, 0.0003267477441113442, 0.0003203180094715208, 0.00029138417448848486, 0.0002677110314834863, 0.00024696049513295293, 0.00025339022977277637, 0.0002586509508546442, 0.000263619382167235, 0.0002434533671475947, 0.00025017536245286465, 0.0002305938833160326, 0.00021451953216455877, 0.00022562545200344175, 0.00023380876518785954, 0.0002174421533709392, 0.00022533319133799523, 0.00021013562218286097, 0.0001961070956895128, 0.00018383213318884373, 0.00019873744167853147, 0.0002361468505114317, 0.00021978023869451135, 0.00020516719087027013, 0.0002633271215017885, 0.00026829555281437933, 0.0002706336381379515, 0.0002498831017874181, 0.00025543608353473246, 0.00023731589317321777, 0.0002449146704748273, 0.0002513444051146507, 0.00028057050076313317, 0.0003054126864299178, 0.00027881693677045405, 0.00027852467610500753, 0.0002796937187667936], "gravityY": [0.0033636093139648438, 0.0033664703369140625, 0.00336456298828125, 0.0033636093139648438, 0.0033617019653320312, 0.0033636093139648438, 0.003360748291015625, 0.0033655166625976562, 0.00336456298828125, 0.00336456298828125, 0.00336456298828125, 0.0033636093139648438, 0.0033655166625976562, 0.0033712387084960938, 0.0033693313598632812, 0.0033664703369140625, 0.0033655166625976562, 0.0033617019653320312, 0.0033626556396484375, 0.0033636093139648438, 0.0033655166625976562, 0.0033617019653320312, 0.00336456298828125, 0.0033626556396484375, 0.0033617019653320312, 0.0033626556396484375, 0.0033617019653320312, 0.003360748291015625, 0.003360748291015625, 0.0033588409423828125, 0.0033588409423828125, 0.0033578872680664062, 0.0033597946166992188, 0.0033617019653320312, 0.0033617019653320312, 0.0033597946166992188, 0.0033655166625976562, 0.0033636093139648438, 0.0033655166625976562, 0.0033636093139648438, 0.00336456298828125, 0.0033617019653320312, 0.0033636093139648438, 0.0033636093139648438, 0.003368377685546875, 0.0033693313598632812, 0.0033655166625976562, 0.0033655166625976562, 0.0033664703369140625], "gravityZ": [-1.1920928955078125e-05, -4.291534423828125e-05, -1.6570091247558594e-05, 4.470348358154297e-06, 2.288818359375e-05, 1.2636184692382812e-05, 3.0159950256347656e-05, -7.510185241699219e-06, -1.0132789611816406e-05, -1.806020736694336e-05, 2.086162567138672e-06, -1.6689300537109375e-06, -3.325939178466797e-05, -8.499622344970703e-05, -7.706880569458008e-05, -4.494190216064453e-05, -1.9490718841552734e-05, 2.384185791015625e-06, -4.291534423828125e-06, -1.1622905731201172e-05, -1.9788742065429688e-05, 3.874301910400391e-06, -3.4570693969726562e-06, 1.5854835510253906e-05, 3.1948089599609375e-05, 1.9073486328125e-05, 1.233816146850586e-05, 2.9265880584716797e-05, 2.0802021026611328e-05, 3.6597251892089844e-05, 5.0067901611328125e-05, 6.23464584350586e-05, 4.476308822631836e-05, 6.794929504394531e-06, 2.3424625396728516e-05, 3.921985626220703e-05, -2.2411346435546875e-05, -2.562999725341797e-05, -3.0338764190673828e-05, -5.4836273193359375e-06, -1.33514404296875e-05, 8.52346420288086e-06, 6.556510925292969e-07, -4.887580871582031e-06, -3.731250762939453e-05, -6.306171417236328e-05, -3.325939178466797e-05, -3.17692756652832e-05, -3.3855438232421875e-05], "gyroX": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],"gyroY": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "gyroZ": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "linearAccelX": [0.0002571896475274116, 0.0002843699185177684, 0.00026128129684366286, 0.00024169980315491557, 0.00022387188801076263, 0.0002332242438569665, 0.0002165653568226844, 0.0002510521444492042, 0.0002548515622038394, 0.00026391164283268154, 0.0002437456278130412, 0.0002492985804565251, 0.00027910919743590057, 0.0003267477441113442, 0.0003203180094715208, 0.00029138417448848486, 0.0002677110314834863, 0.00024696049513295293, 0.00025339022977277637, 0.0002586509508546442, 0.000263619382167235, 0.0002434533671475947, 0.00025017536245286465, 0.0002305938833160326, 0.00021451953216455877, 0.00022562545200344175, 0.00023380876518785954, 0.0002174421533709392, 0.00022533319133799523, 0.00021013562218286097, 0.0001961070956895128, 0.00018383213318884373, 0.00019873744167853147, 0.0002361468505114317, 0.00021978023869451135, 0.00020516719087027013, 0.0002633271215017885, 0.00026829555281437933, 0.0002706336381379515, 0.0002498831017874181, 0.00025543608353473246, 0.00023731589317321777, 0.0002449146704748273, 0.0002513444051146507, 0.00028057050076313317, 0.0003054126864299178, 0.00027881693677045405, 0.00027852467610500753, 0.0002796937187667936], "linearAccelY": [0.0033636093139648438, 0.0033664703369140625, 0.00336456298828125, 0.0033636093139648438, 0.0033617019653320312, 0.0033636093139648438, 0.003360748291015625, 0.0033655166625976562, 0.00336456298828125, 0.00336456298828125, 0.00336456298828125, 0.0033636093139648438, 0.0033655166625976562, 0.0033712387084960938, 0.0033693313598632812, 0.0033664703369140625, 0.0033655166625976562, 0.0033617019653320312, 0.0033626556396484375, 0.0033636093139648438, 0.0033655166625976562, 0.0033617019653320312, 0.00336456298828125, 0.0033626556396484375, 0.0033617019653320312, 0.0033626556396484375, 0.0033617019653320312, 0.003360748291015625, 0.003360748291015625, 0.0033588409423828125, 0.0033588409423828125, 0.0033578872680664062, 0.0033597946166992188, 0.0033617019653320312, 0.0033617019653320312, 0.0033597946166992188, 0.0033655166625976562, 0.0033636093139648438, 0.0033655166625976562, 0.0033636093139648438, 0.00336456298828125, 0.0033617019653320312, 0.0033636093139648438, 0.0033636093139648438, 0.003368377685546875, 0.0033693313598632812, 0.0033655166625976562, 0.0033655166625976562, 0.0033664703369140625], "linearAccelZ": [-1.1920928955078125e-05, -4.291534423828125e-05, -1.6570091247558594e-05, 4.470348358154297e-06, 2.288818359375e-05, 1.2636184692382812e-05, 3.0159950256347656e-05, -7.510185241699219e-06, -1.0132789611816406e-05, -1.806020736694336e-05, 2.086162567138672e-06, -1.6689300537109375e-06, -3.325939178466797e-05, -8.499622344970703e-05, -7.706880569458008e-05, -4.494190216064453e-05, -1.9490718841552734e-05, 2.384185791015625e-06, -4.291534423828125e-06, -1.1622905731201172e-05, -1.9788742065429688e-05, 3.874301910400391e-06, -3.4570693969726562e-06, 1.5854835510253906e-05, 3.1948089599609375e-05, 1.9073486328125e-05, 1.233816146850586e-05, 2.9265880584716797e-05, 2.0802021026611328e-05, 3.6597251892089844e-05, 5.0067901611328125e-05, 6.23464584350586e-05, 4.476308822631836e-05, 6.794929504394531e-06, 2.3424625396728516e-05, 3.921985626220703e-05, -2.2411346435546875e-05, -2.562999725341797e-05, -3.0338764190673828e-05, -5.4836273193359375e-06, -1.33514404296875e-05, 8.52346420288086e-06, 6.556510925292969e-07, -4.887580871582031e-06, -3.731250762939453e-05, -6.306171417236328e-05, -3.325939178466797e-05, -3.17692756652832e-05, -3.3855438232421875e-05], "lat": 18.3631517, "long": 74.96895, "speed": 0.0, "acceleration": 0.0, "cornering": 0, "timestamp": 1646140675, "userId": 1}''');
        } else {
          // await _localDB.insertIntoDatabase(
          //     json.encode(_sensorFilteredData), _sensorFilteredData['timestamp']);
        }
      });
      channel?.stream.listen((event) {
        var result = json.decode(event);
        if (result['type'] == "Fall") {
          var date = DateTime.fromMillisecondsSinceEpoch(result["timestamp"] * 1000);
          FlutterForegroundTask.updateService(
              notificationTitle: 'Vicara fall detection service',
              notificationText:
                  "Fall detected on ${(date.hour < 10 ? '0${date.hour}' : date.hour)}:${(date.minute < 10 ? '0${date.minute}' : date.minute)}");
        }
        sendPort?.send({'type': 'event', 'data': result});
      }, onDone: () {
        print("done-------------------------");
        channel = null;
        sendPort?.send({'type': 'ws-connection-status', 'data': false});
      }, onError: (err) {
        print("Error-------------------------");
        channel = null;
        sendPort?.send({'type': 'ws-connection-status', 'data': false});
      });
    }
  }

  SendPort? globalSendPort;
  @override
  Future<void> onStart(DateTime timestamp, SendPort? sendPort) async {
    print('onstart');
    disconnectServer = () {
      sendPort?.send({'type': 'ws-connection-status', 'data': false});
    };
    _connSub = Connectivity().onConnectivityChanged.listen((event) {
      if (event != ConnectivityResult.none && channel == null) {
        FlutterForegroundTask.getData<String>(key: 'phone').then((phone) {
          _apIs.getWSAuth().then((poolGranted) {
            sendPort?.send({'type': 'pool-access', 'data': true});
            wsTalker(phone, sendPort)
                .then((value) => sendPort?.send({'type': 'ws-connection-status', 'data': true}));
          }).onError((error, stackTrace) {
            sendPort?.send({'type': 'pool-access', 'data': false});
          });
        });
      }
    });
    _connSub = Stream.periodic(const Duration(seconds: 10)).listen((event) {
      if (channel == null && _connectionAttempt < 5) {
        Connectivity().checkConnectivity().then((connStatus) async {
          if (connStatus != ConnectivityResult.none && channel == null) {
            FlutterForegroundTask.getData<String>(key: 'phone').then((phone) {
              _apIs.getWSAuth().then((poolGranted) {
                wsTalker(phone, sendPort).then(
                    (value) => sendPort?.send({'type': 'ws-connection-status', 'data': true}));
              });
            });
          }
          _connectionAttempt++;
        });
      }
    });
  }

  @override
  Future<void> onEvent(DateTime timestamp, SendPort? sendPort) async {}

  @override
  Future<void> onDestroy(DateTime timestamp) async {
    if (disconnectServer != null) disconnectServer!();
    _connSub?.cancel();
  }

  @override
  void onButtonPressed(String id) {
    if (id == "false_alert") {
      print('object');
    } else if (id == "exit") {
      if (disconnectServer != null) disconnectServer!();
      channel?.sink.close();
      channel = null;
      FlutterForegroundTask.stopService();
    }
  }
}
